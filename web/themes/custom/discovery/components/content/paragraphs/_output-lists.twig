{#
  Output lists used for 
  - paragraph--list-block
  - paragraph--related-articles

  Builds block classes 
  list classes

  Checks for carousel


/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# set classes for the container #}
{%
  set blockClasses = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
paragraph.bundle|clean_class,
  ]
%}

{# set view mode #}
{% set view_mode = elements["#view_mode"] %}

{# set list_attributes for thelist #}
{% set list_attributes = create_attribute() %}
{# set array list_classes #}
{% set list_classes = [] %}

{# marge list_classes based on 'carousel' , include flickity if carousel#}
{% if content.field_carousel.0 %}
  {% set list_classes = list_classes|merge(['carousel', 'carousel--' ~ view_mode]) %}
  {{attach_library('discovery/flickity')}}
{% else %}
  {% set list_classes = list_classes|merge(['list-block__list']) %}
{% endif %}

<div{{attributes.addClass(blockClasses)}}>
	<h3 class="list-block__label">
		{{content.field_component_label}}
	</h3>
  {% if content.field_formatted_text.0 %}
  <div class="list-block__text">
    {{content.field_formatted_text}}
  </div>
  {% endif %}
	<div {{list_attributes.addClass(list_classes)}}>
		{{items}}
	</div>
  {{content.field_link}}
</div>
